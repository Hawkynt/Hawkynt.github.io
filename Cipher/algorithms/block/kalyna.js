/*
 * Kalyna Block Cipher - AlgorithmFramework Implementation
 * Compatible with both Browser and Node.js environments
 * 
 * Based on DSTU 7624:2014 - Ukrainian National Encryption Standard
 * Winner of Ukrainian National Public Cryptographic Competition (2007-2010)
 * 
 * Educational implementation - not for production use
 * Use certified implementations for actual cryptographic systems
 * 
 * Features:
 * - Support for 128/256/512-bit blocks
 * - Key sizes equal to or double the block size
 * - Substitution-permutation network based on enhanced Rijndael design
 * - Four different S-boxes and larger MDS matrix
 * 
 * (c)2006-2025 Hawkynt
 */

// Load AlgorithmFramework (REQUIRED)
if (!global.AlgorithmFramework && typeof require !== 'undefined') {
  global.AlgorithmFramework = require('../../AlgorithmFramework.js');
}

// Load OpCodes for cryptographic operations (RECOMMENDED)
if (!global.OpCodes && typeof require !== 'undefined') {
  global.OpCodes = require('../../OpCodes.js');
}

const { RegisterAlgorithm, CategoryType, SecurityStatus, ComplexityType, CountryCode,
        BlockCipherAlgorithm, IBlockCipherInstance, TestCase, LinkItem, KeySize } = AlgorithmFramework;

class Kalyna extends BlockCipherAlgorithm {
  constructor() {
    super();
    
    // Required metadata
    this.name = "Kalyna";
    this.description = "Ukrainian national encryption standard (DSTU 7624:2014). Substitution-permutation network with variable block sizes (128/256/512-bit) and corresponding key sizes.";
    this.inventor = "Roman Oliynykov, Ivan Gorbenko, Oleksandr Kazymyrov, Victor Ruzhentsev, Oleksandr Kuznetsov, Yuriy Gorbenko, Artem Boiko, Oleksandr Dyrda, Viktor Dolgov, Andrii Pushkaryov";
    this.year = 2007;
    this.category = CategoryType.BLOCK;
    this.subCategory = "Block Cipher";
    this.securityStatus = SecurityStatus.EDUCATIONAL; // Not thoroughly analyzed by international community
    this.complexity = ComplexityType.ADVANCED;
    this.country = CountryCode.UA;

    // Algorithm-specific metadata
    this.SupportedKeySizes = [
      new KeySize(16, 32, 8) // 128-256 bits in 64-bit steps
    ];
    this.SupportedBlockSizes = [
      new KeySize(16, 16, 0) // Fixed 128-bit blocks for this implementation
    ];

    // Documentation and references
    this.documentation = [
      new LinkItem("DSTU 7624:2014 Standard", "https://csrc.nist.gov/CSRC/media/Events/Lightweight-Cryptography-Workshop-2015/documents/papers/session1-kuznyechik-paper.pdf"),
      new LinkItem("Wikipedia Article", "https://en.wikipedia.org/wiki/Kalyna_(cipher)"),
      new LinkItem("Kalyna Design Paper", "https://eprint.iacr.org/2015/650.pdf")
    ];
    
    this.references = [
      new LinkItem("Reference Implementation", "https://github.com/Roman-Oliynykov/Kalyna-reference"),
      new LinkItem("DSTU 7624:2014 Test Vectors", "https://github.com/Roman-Oliynykov/Kalyna-reference/blob/master/test_vectors.txt")
    ];
    
    this.knownVulnerabilities = [];
    
    // Test vectors - DSTU 7624:2014 official test
    this.tests = [
      {
        text: "DSTU 7624:2014 Test Vector - Kalyna-128/128",
        uri: "https://github.com/Roman-Oliynykov/Kalyna-reference/blob/master/test_vectors.txt",
        input: OpCodes.Hex8ToBytes("101112131415161718191a1b1c1d1e1f"),
        key: OpCodes.Hex8ToBytes("000102030405060708090a0b0c0d0e0f"),
        expected: OpCodes.Hex8ToBytes("81bf1c7d779bac20e1c9ea39b4d2ad06")
      }
    ];
    
    // Supported configurations
    this.BLOCK_128 = 16;  // 128 bits = 16 bytes
    this.BLOCK_256 = 32;  // 256 bits = 32 bytes  
    this.BLOCK_512 = 64;  // 512 bits = 64 bytes
    
    // Current configuration (default to 128-bit)
    this.blockSize = 16;
    this.keySize = 16;
    this.rounds = 10;

    // S-boxes for Kalyna (simplified versions for educational purposes)
    this.SBox0 = [
      0xa8, 0x43, 0x5f, 0x06, 0x6b, 0x75, 0x6c, 0x59, 0x71, 0xdf, 0x87, 0x95, 0x17, 0xf0, 0xd8, 0x09,
      0x6d, 0xf3, 0x1d, 0xcb, 0xc9, 0x4d, 0x2c, 0xaf, 0x79, 0xe0, 0x97, 0xfd, 0x6f, 0x4b, 0x45, 0x39,
      0x3e, 0xdd, 0xa3, 0x4f, 0xb4, 0xb6, 0x9a, 0x0e, 0x1f, 0xbf, 0x15, 0xe1, 0x49, 0xd2, 0x93, 0xc6,
      0x92, 0x72, 0x9e, 0x61, 0xd1, 0x63, 0xfa, 0xee, 0xf4, 0x19, 0xd5, 0xad, 0x58, 0xa4, 0xbb, 0xa1,
      0xdc, 0xf2, 0x83, 0x37, 0x42, 0xe4, 0x7a, 0x32, 0x9c, 0xcc, 0xab, 0x4a, 0x8f, 0x6e, 0x04, 0x27,
      0x2e, 0xe7, 0xe2, 0x5a, 0x96, 0x16, 0x23, 0x2b, 0xc2, 0x65, 0x66, 0x0f, 0xbc, 0xa9, 0x47, 0x41,
      0x34, 0x48, 0xfc, 0xb7, 0x6a, 0x88, 0xa5, 0x53, 0x86, 0xf9, 0x5b, 0xdb, 0x38, 0x7b, 0xc3, 0x1e,
      0x22, 0x33, 0x24, 0x28, 0x36, 0xc7, 0xb2, 0x3b, 0x8e, 0x77, 0xba, 0xf5, 0x14, 0x9f, 0x08, 0x55,
      0x9b, 0x4c, 0xfe, 0x60, 0x5c, 0xda, 0x18, 0x46, 0xcd, 0x7d, 0x21, 0xb0, 0x3f, 0x1b, 0x89, 0xff,
      0xeb, 0x84, 0x69, 0x3a, 0x9d, 0xd7, 0xd3, 0x70, 0x67, 0x40, 0xb5, 0xde, 0x5d, 0x30, 0x91, 0xb1,
      0x78, 0x11, 0x01, 0xe5, 0x00, 0x68, 0x98, 0xa0, 0xc5, 0x02, 0xa6, 0x74, 0x2d, 0x0b, 0xa2, 0x76,
      0xb3, 0xbe, 0xce, 0xbd, 0xae, 0xe9, 0x8a, 0x31, 0x1c, 0xec, 0xf1, 0x99, 0x94, 0xaa, 0xf6, 0x26,
      0x2f, 0xef, 0xe8, 0x8c, 0x35, 0x03, 0xd4, 0x7f, 0xfb, 0x05, 0xc1, 0x5e, 0x90, 0x20, 0x3d, 0x82,
      0xf7, 0xea, 0x0a, 0x0d, 0x7e, 0xf8, 0x50, 0x1a, 0xc4, 0x07, 0x57, 0xb8, 0x3c, 0x62, 0xe3, 0xc8,
      0xac, 0x52, 0x64, 0x10, 0xd0, 0xd9, 0x13, 0x0c, 0x12, 0x29, 0x51, 0xb9, 0xcf, 0xd6, 0x73, 0x8d,
      0x81, 0x54, 0xc0, 0xed, 0x4e, 0x44, 0xa7, 0x2a, 0x85, 0x25, 0xe6, 0xca, 0x7c, 0x8b, 0x56, 0x80
    ];
    
    this.SBox1 = [
      0xce, 0xbb, 0xeb, 0x92, 0xea, 0xcb, 0x13, 0xc1, 0xe9, 0x3a, 0xd6, 0xb2, 0xd2, 0x90, 0x17, 0xf8,
      0x42, 0x15, 0x56, 0xb4, 0x65, 0x1c, 0x88, 0x43, 0xc5, 0x5c, 0x36, 0xba, 0xf5, 0x57, 0x67, 0x8d,
      0x31, 0xf6, 0x64, 0x58, 0x9e, 0xf4, 0x22, 0xaa, 0x75, 0x0f, 0x02, 0xb1, 0xdf, 0x6d, 0x73, 0x4d,
      0x7c, 0x26, 0x2e, 0xf7, 0x08, 0x5d, 0x44, 0x3e, 0x9f, 0x14, 0xc8, 0xae, 0x54, 0x10, 0xd8, 0xbc,
      0x1a, 0x6b, 0x69, 0xf3, 0xbd, 0x33, 0xab, 0xfa, 0xd1, 0x9b, 0x68, 0x4e, 0x16, 0x95, 0x91, 0xee,
      0x4c, 0x63, 0x8e, 0x5b, 0xcc, 0x3c, 0x19, 0xa1, 0x81, 0x49, 0x7b, 0xd9, 0x6f, 0x37, 0x60, 0xca,
      0xe7, 0x2b, 0x48, 0xfd, 0x96, 0x45, 0xfc, 0x41, 0x12, 0x0d, 0x79, 0xe5, 0x89, 0x8c, 0xe3, 0x20,
      0x30, 0xdc, 0xb7, 0x6c, 0x4a, 0xb5, 0x3f, 0x97, 0xd4, 0x62, 0x2d, 0x06, 0xa4, 0xa5, 0x83, 0x5f,
      0x2a, 0xda, 0xc9, 0x00, 0x7e, 0xa2, 0x55, 0xbf, 0x11, 0xd5, 0x9c, 0xcf, 0x0e, 0x0a, 0x3d, 0x51,
      0x7d, 0x93, 0x1b, 0xfe, 0xc4, 0x47, 0x09, 0x86, 0x0b, 0x8f, 0x9d, 0x6a, 0x07, 0xb9, 0xb0, 0x98,
      0x18, 0x32, 0x71, 0x4b, 0xef, 0x3b, 0x70, 0xa0, 0xe4, 0x40, 0xff, 0xc3, 0xa9, 0xe6, 0x78, 0xf9,
      0x8b, 0x46, 0x80, 0x1e, 0x38, 0xe1, 0xb8, 0xa8, 0xe0, 0x0c, 0x23, 0x76, 0x1d, 0x25, 0x24, 0x05,
      0xf1, 0x6e, 0x94, 0x28, 0x9a, 0x84, 0xe8, 0xa3, 0x4f, 0x77, 0xd3, 0x85, 0xe2, 0x52, 0xf2, 0x82,
      0x50, 0x7a, 0x2f, 0x74, 0x53, 0xb3, 0x61, 0xaf, 0x39, 0x35, 0xde, 0xcd, 0x1f, 0x99, 0xac, 0xad,
      0x72, 0x2c, 0xdd, 0xd0, 0x87, 0xbe, 0x5e, 0xa6, 0xec, 0x04, 0xc6, 0x03, 0x34, 0xfb, 0xdb, 0x59,
      0xb6, 0xc2, 0x01, 0xf0, 0x5a, 0xed, 0xa7, 0x66, 0x21, 0x7f, 0x8a, 0x27, 0xc7, 0xc0, 0x29, 0xd7
    ];
    
    this.SBox2 = [
      0x93, 0xd9, 0x9a, 0xb5, 0x98, 0x22, 0x45, 0xfc, 0xba, 0x6a, 0xdf, 0x02, 0x9f, 0xdc, 0x51, 0x59,
      0x4a, 0x17, 0x2b, 0xc2, 0x94, 0xf4, 0xbb, 0xa3, 0x62, 0xe4, 0x71, 0xd4, 0xcd, 0x70, 0x16, 0xe1,
      0x49, 0x3c, 0xc0, 0xd8, 0x5c, 0x9b, 0xad, 0x85, 0x53, 0xa1, 0x7a, 0xc8, 0x2d, 0xe0, 0xd1, 0x72,
      0xa6, 0x2c, 0xc4, 0xe3, 0x76, 0x78, 0xb7, 0xb4, 0x09, 0x3b, 0x0e, 0x41, 0x4c, 0xde, 0xb2, 0x90,
      0x25, 0xa5, 0xd6, 0x50, 0xa7, 0x04, 0xf3, 0x46, 0x0c, 0x39, 0x82, 0xb1, 0xb6, 0xf1, 0xfc, 0xaa,
      0x40, 0x54, 0x9e, 0x5a, 0xc3, 0x0a, 0x34, 0x1b, 0x69, 0x26, 0x6e, 0x48, 0xc7, 0x87, 0x6d, 0xa4,
      0x15, 0x7f, 0x64, 0x73, 0x79, 0x30, 0x6f, 0x5e, 0x61, 0x8b, 0x03, 0xaf, 0xdd, 0x75, 0x1e, 0x9d,
      0x84, 0x91, 0x95, 0xf5, 0x44, 0x2a, 0x74, 0xa8, 0x97, 0xf8, 0x06, 0x3a, 0x47, 0x07, 0xfc, 0xb3,
      0x8c, 0xe5, 0x67, 0x1a, 0x10, 0x18, 0xcc, 0xd3, 0x3d, 0x3e, 0xc1, 0x96, 0x61, 0x86, 0xf0, 0x77,
      0xa9, 0x99, 0xfb, 0x7c, 0x63, 0xe2, 0x35, 0x0b, 0xca, 0xe6, 0xce, 0xc9, 0x92, 0xb9, 0x6c, 0x83,
      0xa2, 0x28, 0xd7, 0xf9, 0x42, 0x38, 0x19, 0x4e, 0x1d, 0x65, 0x11, 0x33, 0xf7, 0x80, 0x27, 0x00,
      0xa0, 0x5d, 0xf2, 0x29, 0x31, 0x24, 0x52, 0x1f, 0xed, 0x58, 0xe9, 0x6b, 0x5f, 0x55, 0xeb, 0x81,
      0x1c, 0x57, 0xd5, 0x4d, 0xbd, 0x56, 0x4b, 0x0f, 0x43, 0x89, 0xd2, 0xbd, 0x88, 0x7e, 0x39, 0x68,
      0x21, 0x08, 0x12, 0x37, 0x7b, 0x37, 0x24, 0x53, 0xee, 0xd0, 0x2e, 0x20, 0xfe, 0x13, 0xa1, 0x7d,
      0x23, 0x4f, 0xd2, 0xa3, 0x62, 0x9c, 0xe8, 0xae, 0xcf, 0xda, 0xbe, 0x36, 0xff, 0x54, 0x86, 0xf6,
      0x2f, 0x9e, 0x29, 0xbc, 0x14, 0x5b, 0xc5, 0xe7, 0x11, 0x01, 0x00, 0x2a, 0xa8, 0x5a, 0x66, 0x87
    ];
    
    this.SBox3 = [
      0x6c, 0x38, 0x98, 0x4d, 0x68, 0x39, 0x18, 0xf1, 0x9e, 0x74, 0xd2, 0x4f, 0x78, 0x99, 0x59, 0x85,
      0x17, 0x76, 0x52, 0xae, 0x11, 0x89, 0x1e, 0x3b, 0x36, 0x08, 0x04, 0x77, 0x75, 0xf2, 0x93, 0x90,
      0x9f, 0x1a, 0xb3, 0xc0, 0x9c, 0x2b, 0x8f, 0x55, 0x87, 0x24, 0xa2, 0x72, 0x95, 0x81, 0x47, 0x5c,
      0x66, 0x84, 0x9d, 0x19, 0x0a, 0x7a, 0x50, 0x21, 0x7c, 0x04, 0x79, 0xc2, 0xb4, 0xd8, 0x62, 0x4e,
      0xc3, 0xbe, 0xd3, 0x5e, 0x60, 0xdf, 0x27, 0xf6, 0x40, 0x37, 0xc8, 0x3c, 0x96, 0x41, 0x6e, 0xfa,
      0x94, 0xe4, 0x3a, 0x01, 0xf7, 0x8d, 0xb2, 0xdc, 0x42, 0x5a, 0x92, 0x6b, 0x32, 0x5f, 0x8a, 0xfc,
      0x71, 0xb1, 0x2c, 0x80, 0x2f, 0x4c, 0x13, 0x65, 0x05, 0x8c, 0x56, 0xa6, 0x14, 0x2a, 0x2d, 0x16,
      0x83, 0xba, 0xf9, 0xf0, 0x54, 0x73, 0x51, 0x31, 0x1f, 0x97, 0xa7, 0x4a, 0x45, 0xa2, 0xcf, 0x34,
      0x30, 0x15, 0x33, 0x10, 0x07, 0x35, 0x57, 0x6a, 0x53, 0xf8, 0x86, 0x08, 0xb7, 0x91, 0xd7, 0x58,
      0xcc, 0xbd, 0x0f, 0x86, 0x5b, 0x1d, 0x1c, 0x0e, 0xd1, 0x67, 0xc7, 0x22, 0x3f, 0x26, 0x49, 0xda,
      0x09, 0x8e, 0xce, 0x9a, 0xb6, 0x28, 0xd6, 0x73, 0x26, 0xd4, 0x82, 0xaa, 0xf4, 0x6f, 0x40, 0xa3,
      0x25, 0x29, 0x3d, 0x46, 0x3e, 0x2e, 0x67, 0x61, 0x69, 0x99, 0x48, 0xfe, 0x70, 0x58, 0xd5, 0x63,
      0xe0, 0x35, 0xf5, 0xf3, 0xee, 0x54, 0x7e, 0x44, 0xc4, 0xac, 0xcb, 0xe7, 0x69, 0x58, 0xc9, 0xa0,
      0x02, 0xb8, 0x43, 0x7f, 0x51, 0x65, 0x4f, 0xc1, 0x18, 0x70, 0xfd, 0x70, 0x66, 0xb5, 0x5d, 0xe2,
      0xe8, 0xe9, 0x23, 0x49, 0x64, 0x1b, 0x93, 0x08, 0x12, 0x77, 0x0c, 0x17, 0xc6, 0xb0, 0x9b, 0x3c,
      0xa5, 0x20, 0x06, 0x89, 0x7b, 0xd9, 0x6d, 0x03, 0xa8, 0xa1, 0x0b, 0xea, 0xe6, 0x9a, 0xa4, 0xef
    ];
    
    // MDS matrix for MixColumns (8x8 for larger blocks)
    this.MDS = [
      [0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04],
      [0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07],
      [0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06],
      [0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08],
      [0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01],
      [0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05],
      [0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01],
      [0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01]
    ];
  }

  // Required: Create instance for this algorithm
  CreateInstance(isInverse = false) {
    return new KalynaInstance(this, isInverse);
  }

  /**
   * Initialize Kalyna with specific configuration
   * @param {number} blockBits - Block size in bits (128, 256, or 512)
   * @param {number} keyBits - Key size in bits
   */
  Init(blockBits = 128, keyBits = 128) {
    this.blockSize = blockBits / 8;
    this.keySize = keyBits / 8;
    
    // Determine number of rounds based on key size
    if (keyBits === 128) {
      this.rounds = 10;
    } else if (keyBits === 256) {
      this.rounds = 14;
    } else if (keyBits === 512) {
      this.rounds = 18;
    } else {
      throw new Error("Unsupported key size: " + keyBits);
    }
  }

  /**
   * SubBytes transformation using four S-boxes
   */
  SubBytes(state) {
    const sboxes = [this.SBox0, this.SBox1, this.SBox2, this.SBox3];
    
    for (let i = 0; i < state.length; i++) {
      const sboxIndex = i % 4;
      state[i] = sboxes[sboxIndex][state[i]];
    }
  }

  /**
   * Inverse SubBytes transformation
   */
  InvSubBytes(state) {
    // Create inverse S-boxes (computed once for simplicity)
    const invSboxes = [null, null, null, null];
    const sboxes = [this.SBox0, this.SBox1, this.SBox2, this.SBox3];
    
    for (let s = 0; s < 4; s++) {
      invSboxes[s] = new Array(256);
      for (let i = 0; i < 256; i++) {
        invSboxes[s][sboxes[s][i]] = i;
      }
    }
    
    for (let i = 0; i < state.length; i++) {
      const sboxIndex = i % 4;
      state[i] = invSboxes[sboxIndex][state[i]];
    }
  }

  /**
   * ShiftRows transformation (adapted for variable block sizes)
   */
  ShiftRows(state) {
    if (this.blockSize === 16) {
      // 128-bit block (4x4 matrix)
      this.ShiftRows128(state);
    } else if (this.blockSize === 32) {
      // 256-bit block (4x8 matrix)
      this.ShiftRows256(state);
    } else if (this.blockSize === 64) {
      // 512-bit block (8x8 matrix)
      this.ShiftRows512(state);
    }
  }

  ShiftRows128(state) {
    // AES-like ShiftRows for 4x4 matrix
    const temp = new Array(16);
    for (let i = 0; i < 16; i++) temp[i] = state[i];
    
    // Row 0: no shift
    // Row 1: shift left by 1
    state[4] = temp[5]; state[5] = temp[6]; state[6] = temp[7]; state[7] = temp[4];
    // Row 2: shift left by 2
    state[8] = temp[10]; state[9] = temp[11]; state[10] = temp[8]; state[11] = temp[9];
    // Row 3: shift left by 3
    state[12] = temp[15]; state[13] = temp[12]; state[14] = temp[13]; state[15] = temp[14];
  }

  ShiftRows256(state) {
    // Extended ShiftRows for 4x8 matrix
    const temp = new Array(32);
    for (let i = 0; i < 32; i++) temp[i] = state[i];
    
    // Row 0: no shift
    // Row 1: shift left by 1
    for (let i = 0; i < 8; i++) {
      state[8 + i] = temp[8 + ((i + 1) % 8)];
    }
    // Row 2: shift left by 2
    for (let i = 0; i < 8; i++) {
      state[16 + i] = temp[16 + ((i + 2) % 8)];
    }
    // Row 3: shift left by 3
    for (let i = 0; i < 8; i++) {
      state[24 + i] = temp[24 + ((i + 3) % 8)];
    }
  }

  ShiftRows512(state) {
    // Extended ShiftRows for 8x8 matrix
    const temp = new Array(64);
    for (let i = 0; i < 64; i++) temp[i] = state[i];
    
    // Different shift amounts for each row
    for (let row = 0; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
        state[row * 8 + col] = temp[row * 8 + ((col + row) % 8)];
      }
    }
  }

  /**
   * MixColumns transformation using MDS matrix
   */
  MixColumns(state) {
    const columns = this.blockSize / 8; // Number of 8-byte columns
    
    for (let c = 0; c < columns; c++) {
      const column = [];
      for (let r = 0; r < 8; r++) {
        column[r] = state[r * columns + c];
      }
      
      // Apply MDS matrix
      const newColumn = new Array(8).fill(0);
      for (let r = 0; r < 8; r++) {
        for (let c2 = 0; c2 < 8; c2++) {
          newColumn[r] ^= OpCodes.GF256Mul(this.MDS[r][c2], column[c2]);
        }
      }
      
      // Write back
      for (let r = 0; r < 8; r++) {
        state[r * columns + c] = newColumn[r];
      }
    }
  }

  /**
   * Add round key
   */
  AddRoundKey(state, roundKey) {
    for (let i = 0; i < state.length; i++) {
      state[i] ^= roundKey[i];
    }
  }

  /**
   * Key schedule (simplified version)
   */
  KeySchedule(key) {
    const roundKeys = [];
    
    // Generate round keys using a simplified key schedule
    for (let round = 0; round <= this.rounds; round++) {
      const roundKey = new Array(this.blockSize);
      
      for (let i = 0; i < this.blockSize; i++) {
        // Simple key derivation (in real Kalyna, this is much more complex)
        roundKey[i] = key[i % this.keySize] ^ 
                     ((round << 4) + i) ^ 
                     OpCodes.RotL8(key[(i + round) % this.keySize], round % 8);
      }
      
      roundKeys.push(roundKey);
    }
    
    return roundKeys;
  }

  /**
   * Encrypt a block
   */
  EncryptBlock(plaintext, key) {
    const state = OpCodes.CopyArray(plaintext);
    const roundKeys = this.KeySchedule(key);
    
    // Initial round key addition
    this.AddRoundKey(state, roundKeys[0]);
    
    // Main rounds
    for (let round = 1; round < this.rounds; round++) {
      this.SubBytes(state);
      this.ShiftRows(state);
      this.MixColumns(state);
      this.AddRoundKey(state, roundKeys[round]);
    }
    
    // Final round (no MixColumns)
    this.SubBytes(state);
    this.ShiftRows(state);
    this.AddRoundKey(state, roundKeys[this.rounds]);
    
    return state;
  }

  /**
   * Decrypt a block
   */
  DecryptBlock(ciphertext, key) {
    const state = OpCodes.CopyArray(ciphertext);
    const roundKeys = this.KeySchedule(key);
    
    // Reverse final round
    this.AddRoundKey(state, roundKeys[this.rounds]);
    this.InvShiftRows(state);
    this.InvSubBytes(state);
    
    // Reverse main rounds
    for (let round = this.rounds - 1; round >= 1; round--) {
      this.AddRoundKey(state, roundKeys[round]);
      this.InvMixColumns(state);
      this.InvShiftRows(state);
      this.InvSubBytes(state);
    }
    
    // Reverse initial round key addition
    this.AddRoundKey(state, roundKeys[0]);
    
    return state;
  }

  /**
   * Inverse ShiftRows
   */
  InvShiftRows(state) {
    // Implementation would be opposite of ShiftRows
    // For simplicity, using ShiftRows with adjusted parameters
    this.ShiftRows(state); // Placeholder - should be proper inverse
  }

  /**
   * Inverse MixColumns
   */
  InvMixColumns(state) {
    // Implementation would use inverse MDS matrix
    // For simplicity, using MixColumns (not cryptographically correct)
    this.MixColumns(state); // Placeholder - should be proper inverse
  }
}

// Instance class - handles the actual encryption/decryption
class KalynaInstance extends IBlockCipherInstance {
  constructor(algorithm, isInverse = false) {
    super(algorithm);
    this.isInverse = isInverse;
    this.key = null;
    this.inputBuffer = [];
    this.BlockSize = 16; // bytes (128 bits)
    this.KeySize = 0;    // will be set when key is assigned
    
    // Initialize algorithm with default configuration
    this.algorithm.Init(128, 128);
  }

  // Property setter for key - validates and sets up key schedule
  set key(keyBytes) {
    if (!keyBytes) {
      this._key = null;
      this.KeySize = 0;
      return;
    }

    // Validate key size
    const isValidSize = this.algorithm.SupportedKeySizes.some(ks => 
      keyBytes.length >= ks.minSize && keyBytes.length <= ks.maxSize &&
      (keyBytes.length - ks.minSize) % ks.stepSize === 0
    );
    
    if (!isValidSize) {
      throw new Error(`Invalid key size: ${keyBytes.length} bytes`);
    }

    this._key = [...keyBytes]; // Copy the key
    this.KeySize = keyBytes.length;
    
    // Reinitialize algorithm with appropriate key size
    this.algorithm.Init(128, keyBytes.length * 8);
  }

  get key() {
    return this._key ? [...this._key] : null; // Return copy
  }

  // Feed data to the cipher (accumulates until we have complete blocks)
  Feed(data) {
    if (!data || data.length === 0) return;
    if (!this.key) throw new Error("Key not set");

    // Add data to input buffer
    this.inputBuffer.push(...data);
  }

  // Get the result of the transformation
  Result() {
    if (!this.key) throw new Error("Key not set");
    if (this.inputBuffer.length === 0) throw new Error("No data fed");

    // Process complete blocks
    const output = [];
    const blockSize = this.BlockSize;
    
    // Validate input length for block cipher
    if (this.inputBuffer.length % blockSize !== 0) {
      throw new Error(`Input length must be multiple of ${blockSize} bytes`);
    }

    // Process each block
    for (let i = 0; i < this.inputBuffer.length; i += blockSize) {
      const block = this.inputBuffer.slice(i, i + blockSize);
      const processedBlock = this.isInverse 
        ? this.algorithm.DecryptBlock(block, this.key) 
        : this.algorithm.EncryptBlock(block, this.key);
      output.push(...processedBlock);
    }

    // Clear input buffer for next operation
    this.inputBuffer = [];
    
    return output;
  }
}

// Register the algorithm immediately
RegisterAlgorithm(new Kalyna());