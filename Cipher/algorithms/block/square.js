/*
 * Square Block Cipher Implementation
 * AlgorithmFramework Format
 * (c)2006-2025 Hawkynt
 *
 * Square cipher designed by Joan Daemen and Vincent Rijmen (1997) - predecessor to AES.
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(['../../AlgorithmFramework', '../../OpCodes'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node.js/CommonJS
    module.exports = factory(
      require('../../AlgorithmFramework'),
      require('../../OpCodes')
    );
  } else {
    // Browser/Worker global
    factory(root.AlgorithmFramework, root.OpCodes);
  }
}((function() {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof window !== 'undefined') return window;
  if (typeof global !== 'undefined') return global;
  if (typeof self !== 'undefined') return self;
  throw new Error('Unable to locate global object');
})(), function (AlgorithmFramework, OpCodes) {
  'use strict';

  if (!AlgorithmFramework) {
    throw new Error('AlgorithmFramework dependency is required');
  }
  
  if (!OpCodes) {
    throw new Error('OpCodes dependency is required');
  }

  const { RegisterAlgorithm, CategoryType, SecurityStatus, ComplexityType, CountryCode,
          BlockCipherAlgorithm, IBlockCipherInstance, KeySize, LinkItem, Vulnerability } = AlgorithmFramework;

  // ===== CONSTANT TABLES =====
  const SQUARE_SBOX = new Uint8Array([
    177, 206, 195, 149, 90, 173, 231, 2, 77, 68, 251, 145, 12, 135, 161, 80,
    203, 103, 84, 221, 70, 143, 225, 78, 240, 253, 252, 235, 249, 196, 26, 110,
    94, 245, 204, 141, 28, 86, 67, 254, 7, 97, 248, 117, 89, 255, 3, 34,
    138, 209, 19, 238, 136, 0, 14, 52, 21, 128, 148, 227, 237, 181, 83, 35,
    75, 71, 23, 167, 144, 53, 171, 216, 184, 223, 79, 87, 154, 146, 219, 27,
    60, 200, 153, 4, 142, 224, 215, 125, 133, 187, 64, 44, 58, 69, 241, 66,
    101, 32, 65, 24, 114, 37, 147, 112, 54, 5, 242, 11, 163, 121, 236, 8,
    39, 49, 50, 182, 124, 176, 10, 115, 91, 123, 183, 129, 210, 13, 106, 38,
    158, 88, 156, 131, 116, 179, 172, 48, 122, 105, 119, 15, 174, 33, 222, 208,
    46, 151, 16, 164, 152, 168, 212, 104, 45, 98, 41, 109, 22, 73, 118, 199,
    232, 193, 150, 55, 229, 202, 244, 233, 99, 18, 194, 166, 20, 188, 211, 40,
    175, 47, 230, 36, 82, 198, 160, 9, 189, 140, 207, 93, 17, 95, 1, 197,
    159, 61, 162, 155, 201, 59, 190, 81, 25, 31, 63, 92, 178, 239, 74, 205,
    191, 186, 111, 100, 217, 243, 62, 180, 170, 220, 213, 6, 192, 126, 246, 102,
    108, 132, 113, 56, 185, 29, 127, 157, 72, 139, 42, 218, 165, 51, 130, 57,
    214, 120, 134, 250, 228, 43, 169, 30, 137, 96, 107, 234, 85, 76, 247, 226
  ]);
  
  const SQUARE_INV_SBOX = new Uint8Array([
    53, 190, 7, 46, 83, 105, 219, 40, 111, 183, 118, 107, 12, 125, 54, 139,
    146, 188, 169, 50, 172, 56, 156, 66, 99, 200, 30, 79, 36, 229, 247, 201,
    97, 141, 47, 63, 179, 101, 127, 112, 175, 154, 234, 245, 91, 152, 144, 177,
    135, 113, 114, 237, 55, 69, 104, 163, 227, 239, 92, 197, 80, 193, 214, 202,
    90, 98, 95, 38, 9, 93, 20, 65, 232, 157, 206, 64, 253, 8, 23, 74,
    15, 199, 180, 62, 18, 252, 37, 75, 129, 44, 4, 120, 203, 187, 32, 189,
    249, 41, 153, 168, 211, 96, 223, 17, 151, 137, 126, 250, 224, 155, 31, 210,
    103, 226, 100, 119, 132, 43, 158, 138, 241, 109, 136, 121, 116, 87, 221, 230,
    57, 123, 238, 131, 225, 88, 242, 13, 52, 248, 48, 233, 185, 35, 84, 21,
    68, 11, 77, 102, 58, 3, 162, 145, 148, 82, 76, 195, 130, 231, 128, 192,
    182, 14, 194, 108, 147, 236, 171, 67, 149, 246, 216, 70, 134, 5, 140, 176,
    117, 0, 204, 133, 215, 61, 115, 122, 72, 228, 209, 89, 173, 184, 198, 208,
    220, 161, 170, 2, 29, 191, 181, 159, 81, 196, 165, 16, 34, 207, 1, 186,
    143, 49, 124, 174, 150, 218, 240, 86, 71, 212, 235, 78, 217, 19, 142, 73,
    85, 22, 255, 59, 244, 164, 178, 6, 160, 167, 251, 27, 110, 60, 51, 205,
    24, 94, 106, 213, 166, 33, 222, 254, 42, 28, 243, 10, 26, 25, 39, 45
  ]);
  
  const SQUARE_T_ENC = Object.freeze([
    new Uint32Array([
      2545004838, 1775160999, 1942209456, 3751122250, 3025820398, 2947394818, 1005053916, 67240454, 2588757463, 2286175436, 66845688, 3616641350, 403442708, 4219963260, 3080823062, 2689618160,
      1674300328, 3462883241, 2824099068, 1339940242, 2353415882, 3952054116, 937550294, 2622377682, 368111845, 268303858, 234683633, 602663880, 133822974, 2110047417, 874125870, 3698224818,
      3160301282, 536212970, 1842138273, 4019031394, 941366308, 2891339514, 2252555205, 167706359, 235341577, 3261161891, 100202749, 3933566367, 2992200171, 201326580, 100860677, 1143087718,
      3783953003, 1473368454, 638784309, 703524551, 3850930285, 0, 470683154, 1748251740, 706024767, 4118839413, 3717502025, 870573008, 804122050, 2679485738, 2790478837, 1176707941,
      2521517021, 2387036105, 773265209, 3148326684, 3583021125, 1781871967, 2745936648, 1171839133, 2243475517, 1272962964, 2655997905, 2924959737, 3248134747, 3516043843, 1138482072, 907746093,
      2017213508, 1707657389, 3348732254, 134480908, 3918433895, 903930069, 1540872076, 4202528135, 4286940538, 2210118456, 2151694528, 1479289972, 1949973070, 2319795663, 401732070, 2218934982,
      3395642799, 1075847264, 2185314755, 806885416, 3832705686, 1243948399, 3549664064, 3765465232, 1815492186, 168101135, 301134563, 369822493, 3013845776, 4068047243, 770501825, 268961816,
      1311188841, 1647391059, 1681011286, 2578888239, 4168907908, 2511384613, 336202270, 3866325909, 3059440621, 4135287693, 2612508460, 4152459638, 1372770947, 437062935, 3563743934, 1277568618,
      3382615639, 2958579944, 3449592913, 4085482352, 3899946140, 2478027552, 2913774593, 1613770832, 4101667470, 3530123707, 4000806809, 504303377, 2846797319, 1109467491, 1239342743, 1439748229,
      1546530418, 3684144972, 537923632, 3181683737, 3315112029, 2779293709, 1574229129, 3496503480, 1512910199, 3294782118, 1378429307, 3664604599, 739644986, 2454276571, 3967186586, 2076690364,
      636020941, 2009186742, 3650524751, 1849112409, 1072031194, 1640680107, 502592745, 669641166, 3328402341, 605164086, 1908589235, 3114706463, 672404540, 2377956401, 1406391168, 1344809080,
      2880417540, 1580150641, 971433695, 1210328172, 2756858614, 2043070143, 3047202837, 302582043, 2411576626, 3985411169, 1808781220, 3126681063, 571543859, 3193921505, 33620227, 2143667642,
      3416235860, 2050833735, 2980225555, 3281754968, 1741277614, 1983593293, 2310979127, 2723238387, 840505643, 1042226977, 2118074177, 3093060836, 2444407331, 737144772, 2487896798, 1875758498,
      2344599348, 2176498235, 3731845041, 3362022572, 1205459358, 334754784, 2084453954, 2645865513, 2712316427, 1306320017, 1607849354, 201721354, 1975566517, 4236148354, 435615471, 3429263018,
      3630984372, 4253320313, 3799085459, 1882732616, 2277095742, 974986535, 4269768577, 3483213138, 2420656344, 3817573224, 1412049534, 1104861851, 3215303962, 1714631509, 4051862131, 1916352843,
      1507251855, 4034427016, 4186343039, 33225467, 1038410969, 1445669757, 2812913934, 1008606754, 3884550510, 3227541664, 3597364157, 569043659, 2857719295, 2555137236, 469235692, 836952787
    ]),
    new Uint32Array([
      647475633, 2808729294, 2960376771, 1256166805, 4004797018, 45067693, 3694913511, 100925954, 3617213773, 3431482436, 4161010683, 1188532625, 337120268, 2096859015, 381133217, 4037038160,
      2825112523, 2848876391, 4238890068, 2454707677, 3398190662, 1693159311, 3593986529, 3533459022, 3843420400, 4061134333, 4044225788, 3357797355, 4261935609, 3112027332, 775166490, 3000790638,
      3803995742, 3927963125, 2708327628, 1659866509, 607656988, 4205598294, 3313910595, 4144627454, 151914247, 2747425121, 4245027064, 2682942837, 3954334041, 4094427135, 84280067, 1715741218,
      1809943178, 2253902289, 891687699, 3341414126, 1843759240, 0, 303828494, 1550332980, 1059722517, 1979023488, 1239258260, 3493061603, 3257921005, 715109813, 4121318227, 1699095331,
      3717614411, 3381544775, 959321879, 482060199, 1171624080, 1600795957, 144944043, 2638600408, 1032173752, 2488000479, 3516813135, 4188952407, 1539414682, 1137808018, 2554584027, 758520603,
      1148730428, 2909128904, 1590139289, 201851908, 1743359630, 3577077984, 2354829271, 2281340285, 2063566213, 948157371, 3229630528, 1951935532, 1316239930, 3481945413, 3860328945, 3330556482,
      2949277029, 1614815264, 3280093505, 674240536, 2531553906, 1867130149, 1087607699, 2430627952, 1517041206, 252314885, 3809604338, 487983883, 280208291, 2347923833, 3241012460, 403703816,
      1766729511, 1398944049, 1449407026, 798602934, 2230877308, 630567088, 504629770, 2514908019, 3988151131, 2381740923, 748402615, 1995932033, 2203177682, 387583245, 3201591914, 1783375398,
      1472831134, 3903871064, 1372429468, 1895007107, 2632479860, 546550707, 28159148, 1348481072, 2398386810, 3151128937, 2582542199, 287182607, 128560814, 1665278241, 2538200798, 2236993744,
      1918643758, 1289459607, 807407632, 431858852, 1573230744, 228960424, 2304627924, 3100665960, 2002398509, 2797888098, 2068982057, 3084545389, 975967766, 3683797321, 2599188086, 3162228679,
      3441813736, 3061301697, 1339659926, 1500395319, 3661620709, 2875312842, 3911054580, 3458722281, 2781242211, 908333586, 3010577090, 532260518, 1009259540, 831372476, 2152977363, 2018519080,
      78360495, 1901997871, 3745113830, 1816667172, 4137964114, 3212428998, 364224672, 454166793, 848281021, 1642957964, 2758528975, 3887750493, 857870609, 3787349855, 50462977, 3128935877,
      1422630815, 1199193405, 330408610, 1489214363, 2926037449, 1299594043, 931774142, 4087501137, 724703513, 557719327, 1098792767, 3837287516, 596751026, 3291213807, 3734260298, 2725236173,
      881573823, 998357690, 2984144751, 2898814052, 2655508953, 3759404019, 1115438654, 698201268, 195144362, 2437799132, 2321536469, 168560134, 3044393152, 2197585534, 4011456246, 2865522278,
      3034082412, 2046657668, 2481090929, 1215313976, 1049082297, 658119965, 2180939647, 1389338013, 3633334344, 1759742859, 2119445034, 2604784346, 448767397, 1432761139, 1945207426, 1265776953,
      2405029590, 2297460856, 2147059334, 4211211002, 3644712164, 2102799147, 245868969, 574365214, 1860667785, 2696962144, 3184946027, 3407997674, 4289353045, 3566750796, 3961255927, 3543261922
    ]),
    new Uint32Array([
      2972096433, 3467078094, 3283121091, 2504712085, 1525593178, 2902634413, 3889970151, 33948674, 1305975373, 1154254916, 4227335163, 2437339025, 202643468, 2273115015, 2702620577, 1357946960,
      3416810443, 1739181671, 1425844308, 3717353437, 1187679302, 2405755791, 3788912609, 1322425422, 4041545200, 4260499453, 4243656188, 3955762155, 4194174969, 3300490692, 439235610, 1857215598,
      1591917662, 4125761525, 3433131468, 2372071309, 472135708, 1459268694, 1137018435, 4277602814, 118033927, 1638122081, 4177331704, 1973414517, 1508618841, 4294183935, 50660867, 577127458,
      2322325898, 3515242449, 322250259, 4006029806, 2288903560, 0, 236067854, 878471220, 356461077, 2155214208, 2487868820, 3822072803, 3988926445, 3039469493, 1408607827, 593839651,
      1272813131, 1204391495, 389623319, 2803678119, 2420495760, 895445557, 2869470123, 3634185688, 3091039672, 3751037919, 1339137615, 1475980887, 2589704602, 2453918098, 3684189147, 455947803,
      1011120188, 3366806984, 2573125529, 67897348, 2389174670, 3772069344, 3616299991, 2106063485, 2239430533, 3141043131, 1086357568, 745822252, 978220090, 1171229253, 4058388465, 1120306242,
      1706019429, 543178784, 1103331905, 405286936, 1922491506, 628050469, 2470499219, 1888542832, 911895606, 84871685, 4074967538, 186455563, 2735780771, 2039214713, 3972083180, 135794696,
      661212711, 827548209, 844522546, 3056572854, 2089089148, 2955253168, 169743370, 1939203699, 1542305371, 2072901243, 3073153975, 2172057473, 3531821522, 219617805, 1790891114, 644500518,
      2656553374, 1491644504, 2622606748, 2205217667, 1956440180, 3005256627, 2885791148, 810573872, 2056189050, 1773916777, 2006576759, 252780047, 2919737774, 560153121, 3734456798, 3498399184,
      779246638, 2538396567, 271589392, 2753150372, 2556282264, 2819466664, 3565772244, 1756942440, 762796589, 1655096418, 695947817, 1840765549, 372911126, 1239126601, 1989864566, 3351018439,
      3905758696, 3249960897, 2521815446, 928607799, 3856285669, 3400229322, 4108918260, 3922601961, 1671808611, 305538066, 3266539970, 2787096998, 339486740, 3157364156, 3548402643, 678973480,
      2936318895, 795958831, 3873389030, 611076132, 1391895634, 3334437318, 2685777312, 152769033, 3174207421, 2355228044, 3483659215, 1575467613, 288563729, 1608629855, 16974337, 3317333957,
      2673134495, 1028094525, 2719199650, 2606285723, 3383650249, 994932283, 3191310782, 1374921297, 422261273, 522272287, 1061256767, 1558493276, 2988675506, 4022610927, 1256100938, 3449974733,
      3207891903, 3124462010, 1873927791, 1689045092, 3651028953, 4091548659, 1044544574, 3022626228, 2852889002, 3700510172, 3582615509, 101321734, 3233117632, 2122513534, 4142864886, 1722469478,
      1823791212, 2222587268, 1905517169, 944271416, 3107882937, 489110045, 2139225727, 2639450013, 1222152264, 2338907019, 712922154, 3667608026, 2769993637, 861234739, 2188636546, 961245753,
      3599718870, 2022240376, 2256533894, 4210754042, 3839442404, 729634347, 2836309929, 505560094, 2305746825, 1621147744, 1807603307, 3939181034, 1442818645, 1289001036, 4159446007, 3805491682
    ]),
    new Uint32Array([
      2981176983, 3469649769, 3284381811, 2509589215, 1515908788, 2913796783, 3890732091, 33687044, 1296947098, 1145359496, 4227594243, 2442217175, 202118168, 2273803515, 2711688887, 1347481760,
      3419121763, 1734846926, 1414855848, 3722285647, 1179044492, 2408539371, 3789674039, 1313788572, 4042319125, 4261278223, 4244435213, 3958097955, 4193910279, 3301226877, 437923380, 1852748508,
      1583276732, 4126534175, 3435962733, 2374853359, 471606328, 1448540844, 1128514950, 4278122249, 117901582, 1633788866, 4177067269, 1970642922, 1499065266, 4294964235, 50529542, 572679748,
      2324327393, 3520169559, 320025894, 4008625961, 2290642405, 0, 235803164, 875846760, 353713962, 2155902453, 2492746205, 3823358003, 3991781935, 3048549023, 1398011302, 589522246,
      1263263126, 1195886990, 387397934, 2812746939, 2425374165, 892690282, 2880112803, 3638074693, 3099082117, 3755971659, 1330631070, 1465383342, 2593807297, 2459059153, 3688601667, 454765878,
      1010582648, 3368594789, 2576965319, 67374088, 2391697385, 3772831029, 3621227611, 2105378810, 2240117503, 3149609091, 1077985408, 741110872, 976899700, 1162203018, 4059162135, 1111672452,
      1701162954, 538992704, 1094828930, 404236336, 1920112356, 623210314, 2475901139, 1886425312, 909531756, 84217610, 4076004113, 185277718, 2745372851, 2038008818, 3974938925, 134748176,
      656894286, 825316194, 842159716, 3065393049, 2088535288, 2964333973, 168435220, 1936954854, 1532751286, 2071694838, 3082235035, 2172745463, 3537011537, 218961690, 1785380564, 640051788,
      2661177289, 1482221744, 2627490253, 2206429427, 1953799400, 3014860947, 2896953773, 808472672, 2054852340, 1768537042, 2004326894, 252645662, 2930640809, 555836226, 3739129673, 3503326549,
      774795868, 2543275227, 269496352, 2762217917, 2560122309, 2829585829, 3570698589, 1751693520, 757954394, 1650632388, 690584402, 1835907034, 370555436, 1229577106, 1987484396, 3351755899,
      3907570981, 3250697847, 2526433241, 926374254, 3857046079, 3402279777, 4109691165, 3924413991, 1667474886, 303183396, 3267539825, 2795904953, 336870440, 3166450061, 3553853523, 673740880,
      2947482795, 791638366, 3873890105, 606366792, 1381168804, 3334913913, 2694845877, 151591698, 3183293071, 2358010349, 3486491755, 1566435258, 286339874, 1600119230, 16843522, 3318069887,
      2678019275, 1027426170, 2728530865, 2610649283, 3385437799, 993742198, 3200137097, 1364325282, 421079858, 522133822, 1061110142, 1549591736, 2998018961, 4025467947, 1246420628, 3452805743,
      3216979083, 3132767105, 1869591006, 1684319432, 3654917703, 4092846099, 1044267644, 3031706013, 2863270817, 3705442637, 3587541599, 101059084, 3233854837, 2122220284, 4143378201, 1718004428,
      1819063512, 2223274493, 1903268834, 943212656, 3115925127, 488449850, 2139062782, 2644333263, 1212733584, 2341169379, 707427924, 3671759681, 2779060927, 859002214, 2189587441, 960056178,
      3604385625, 2021165296, 2256961529, 4210752257, 3840203069, 724270422, 2846428839, 505291324, 2307485415, 1616945344, 1802223062, 3941255969, 1431699370, 1280103576, 4160220187, 3806516017
    ])
  ]);
  
  const SQUARE_T_DEC = Object.freeze([
    new Uint32Array([
      3815291906, 1434804748, 708780849, 1638601719, 2564058482, 566991385, 1008903265, 1167932877, 100512803, 734267231, 2603352512, 1037664271, 1215061108, 4185882245, 4050889503, 3069042190,
      675048429, 1234663450, 2670367117, 3377962803, 2835851434, 2769153405, 2084711823, 1984803017, 1301407831, 3467207628, 3035535058, 807985590, 233923001, 3172558630, 1100721536, 3231739591,
      1367601729, 2463887412, 1872895740, 2402471500, 333460339, 1772602989, 3849151635, 3206164474, 3139223479, 1483998133, 3882757199, 1569306518, 3902539050, 1147541923, 875459067, 267528549,
      4269900410, 2970821361, 2735224300, 3444641662, 4286227988, 1551012856, 801281810, 4084261827, 2570012956, 3510834536, 3265472027, 2295083699, 2328853103, 2967996063, 2051536158, 3535501786,
      3868526625, 1134093660, 3501732102, 300121007, 2118214995, 3433704208, 3635733660, 1683400660, 4219221593, 1917526148, 3936308726, 1784654559, 767680462, 1883793496, 3400528769, 101046417,
      1517767529, 2497587365, 970920002, 2168177479, 4236429990, 600363717, 66612402, 135058842, 3669470272, 2109278689, 941896748, 3478276002, 3702682833, 1671977771, 903173525, 1201566993,
      367389666, 1268003014, 1248793768, 2435030150, 1282067513, 1602944842, 67539021, 4003061179, 504451786, 2868888600, 3949226392, 134151423, 2335464961, 1451036350, 3135740889, 1113833778,
      1974852731, 2535867415, 1739508582, 2502233291, 3969553767, 1468410576, 1615869849, 3102003973, 1705870266, 435138101, 2767636755, 3243985577, 2268994518, 2700106078, 403999323, 2936172603,
      2869223542, 3712569535, 3746175075, 3332748886, 2235388682, 4203156023, 2008454311, 1181045119, 3982602505, 468510441, 3578103077, 4118100818, 2142912829, 667828872, 3001765443, 3602770327,
      1383833331, 1649639237, 742063008, 2075971952, 3105879915, 303765277, 4252626632, 975666416, 201999831, 2531090553, 573830827, 2902072457, 3366763357, 2701884720, 3569262923, 3202419604,
      634194516, 1417561698, 2733838722, 400991038, 641033958, 3277324917, 2201521051, 2017770946, 33769692, 1335009419, 775533436, 1315538149, 4035481457, 908933415, 2631073087, 33236078,
      2302088925, 0, 4136458208, 3801323628, 1951332373, 2468402266, 2902538471, 3544210868, 437764743, 3004197421, 1350096431, 4102954812, 2802754977, 1907575862, 2597791150, 1584519972,
      371033936, 4016241109, 2368833168, 470948374, 2801107407, 1535930119, 936779081, 1851341458, 2227599204, 2261073848, 3611741689, 3767586992, 700927875, 3835052285, 235474187, 1839289888,
      2395597346, 3679225902, 4151735182, 3038098108, 270032833, 841722218, 1805946545, 2935575637, 1080068590, 1716907784, 3915850052, 1042410685, 540065399, 4069246893, 2160125737, 337563532,
      3168944968, 3299278474, 835962328, 3071736416, 1400945309, 3645882610, 501825144, 607530554, 3781948638, 3411335151, 167244276, 2193862645, 200587560, 2636765521, 3344863800, 4169423595,
      2430122216, 3736157197, 869305604, 1750917635, 3311262436, 1004296350, 168795462, 1071302867, 1502554075, 2835123396, 2042599852, 1817866830, 2362090238, 2664543715, 535459492, 1940915434
    ]),
    new Uint32Array([
      48457916, 206931298, 824852259, 4150373139, 1922618477, 421645210, 1631330980, 3443891517, 587595188, 1596703751, 3231394817, 255711616, 1950903388, 2247720830, 535917483, 246869470,
      3978837099, 441030520, 2376018577, 868833183, 2863204264, 2107969005, 2407285293, 3379973552, 1464701416, 3436095843, 3535072918, 3056609505, 3104698721, 649927015, 2151783341, 3351289966,
      1095861234, 882039792, 4235174430, 1284453070, 1930682419, 1835640774, 2481286500, 4206828079, 3082493119, 3042472963, 1340567084, 2522712503, 719887365, 2739168793, 4214500977, 1695543849,
      2063499650, 4054913826, 3970107445, 2127384847, 352287398, 4166808211, 305119895, 3287511267, 479801161, 1758544661, 465740582, 3012086834, 1871368058, 2679171078, 511330293, 3671243641,
      568759560, 1547933925, 114341937, 2937185147, 1400783205, 281848363, 2631447780, 3563345575, 1509653558, 2222082848, 4142571341, 3748290474, 3459105247, 1483753576, 2177544179, 2433091032,
      1767536459, 2777996840, 1111088912, 1199651779, 2801566410, 3307456722, 2986604652, 2584218837, 1088075692, 3783112969, 741876788, 2731496007, 3520901748, 727951451, 2503333205, 289906293,
      3793085931, 3326841904, 2823450388, 2257658780, 961309388, 1247775487, 1292109456, 3152976349, 3390968146, 413859780, 2565563497, 4278714108, 25900126, 3193339150, 3652904859, 843211713,
      2071311836, 395781700, 1718070987, 3415549196, 1743559317, 3495396906, 2573226039, 96003283, 3127225731, 890892206, 329578185, 2848021322, 3599187483, 1587605593, 1528304778, 1001325168,
      1990919392, 3218950480, 1675577880, 1455859126, 176504147, 939165458, 2809640596, 2135319889, 166551985, 3910921446, 634733957, 1391818043, 1031780929, 2284310082, 1135799118, 2547432937,
      4082269086, 1164071807, 2687253243, 1887157457, 1807294455, 487725847, 3372055022, 4030343036, 3607890501, 2039930208, 2871145462, 2309814812, 1573432507, 815860605, 1272233633, 2495537419,
      1411763466, 1649704518, 2191717137, 1041753763, 3861263718, 1975736322, 2609068171, 3262661821, 3691119432, 2337247904, 2083404211, 3847121284, 1911589007, 657861945, 1067242237, 1845623588,
      3716757270, 0, 3774254423, 1826788248, 359943928, 1519591636, 3886874936, 3033743453, 2266634178, 766709866, 793802966, 1022660127, 2712080037, 913421132, 2929383205, 610169307,
      1343626631, 3589235449, 2425172358, 370938394, 3483825537, 123440239, 1228396061, 2456705338, 1686423159, 3095840063, 4191635149, 2967507152, 2200553295, 4259616320, 185469197, 544055638,
      579783146, 786123912, 2398582387, 3165984178, 3239057503, 1781672873, 2976621710, 1437530452, 3997196425, 140924399, 1156146977, 3174965740, 1998598334, 2918353863, 696303847, 2350128847,
      1220338243, 2328143614, 3627144133, 1622611706, 2639495354, 4074328000, 2015226174, 975451694, 3739315188, 4023080151, 4094294001, 4118987695, 671872185, 1369254361, 952589970, 3958932570,
      3901806776, 232698172, 70504589, 57171170, 3838139866, 2654723160, 1175064477, 3544177352, 3680079655, 3299409036, 2893660057, 1315723890, 4270639778, 3818836405, 2753555062, 3933450244
    ]),
    new Uint32Array([
      3154305896, 1644975493, 590424639, 334979499, 1836226772, 2585338315, 2757835810, 1036862877, 3022194173, 123677636, 29399852, 2148482521, 1551124588, 2122709375, 2870997363, 3725506285,
      1810704444, 2014988695, 2441977642, 2670971223, 2829756679, 3984434445, 764378178, 2965993037, 3898035601, 1674366633, 2530391278, 3786813480, 1639517681, 1730592025, 2910863771, 1858584736,
      4064366979, 4029977307, 519860130, 3461123890, 863179744, 3329059239, 1687414125, 804962074, 3216489244, 62216308, 743434094, 3080084873, 86698140, 430130278, 1912288302, 694489074,
      2189098625, 586264851, 904700680, 259968337, 2786393978, 2482527346, 2534551490, 3821269872, 1226610991, 359190851, 639353507, 850626764, 2054130383, 111128808, 4112415303, 2044383931,
      136439445, 3848029080, 822530232, 2075070947, 1699970625, 722521258, 3835484340, 2815714390, 911866748, 545550923, 1308027551, 2866768479, 3754831297, 1750626376, 4085369519, 3633382917,
      1265195639, 681940190, 272775647, 3276243259, 3399941250, 3536135112, 1823605752, 3583641612, 2889931447, 165772729, 875313188, 1201852242, 1959910578, 1529570216, 1435842005, 1964066718,
      3957462501, 818301844, 346573423, 2626064675, 3426307178, 4283064202, 2420966406, 3720081049, 1388977681, 3289950975, 1771629412, 4244572158, 1577159476, 247355005, 2614737639, 3241296483,
      3699078581, 1142396710, 3412486062, 214668581, 2506615962, 718296966, 932798544, 3540367588, 2210031021, 2922715631, 3373507830, 1252639067, 467044158, 1499373808, 2321225748, 1882959618,
      3765873412, 1354751305, 409198410, 3059140261, 1393198397, 305658503, 2494003126, 1367295589, 2970217825, 3874036716, 2233849157, 995292533, 1094549434, 1116219342, 1313059563, 3919042237,
      2666746491, 2135253587, 4221578298, 3513809852, 4151032095, 387781147, 4006149497, 2096118311, 1171721226, 1618581213, 4138410547, 478784762, 3143485612, 2100338955, 2706101438, 194297569,
      173286861, 1180849278, 293774067, 2738755558, 1726359093, 41272152, 2342224696, 3183638596, 1222377987, 2693484434, 3011259961, 2229620329, 2406609032, 958871085, 4248804562, 611189243,
      383617335, 0, 1474360973, 2557272723, 4162155598, 3562705696, 954707201, 1572131648, 3263633943, 1781379856, 3593425016, 524088462, 2778834702, 1278636467, 632199895, 3676593777,
      2270172701, 4191547234, 2257620273, 437656594, 2177869557, 1862753164, 491337686, 982675033, 2003076294, 1069057733, 3455702854, 3501252752, 1333995975, 1090380950, 218828297, 1444965793,
      3928133321, 2284772172, 1938749302, 2998711573, 1606488088, 2842309163, 2393992100, 1414901497, 2314092640, 4010305109, 558164327, 3971825185, 3195478064, 3350065803, 3878256832, 3482063902,
      1128840418, 4270507174, 3319280083, 4200642326, 3130872704, 3237140815, 1048059369, 775562294, 4108247403, 3622816596, 4059302391, 2952102595, 3106409460, 3646004521, 2453194590, 1525414020,
      3102249176, 1007541937, 2365862864, 3791874140, 3672425821, 1486765020, 2638613007, 3369287642, 668686735, 2361698556, 2578217407, 1917742170, 2734591178, 3051593425, 1990467562, 82473904
    ]),
    new Uint32Array([
      1757151971, 2237795413, 1059270954, 2870212449, 3563942552, 3415873825, 581198140, 2638073157, 4256441093, 3288817451, 738312347, 3649048381, 1817998408, 2138998265, 1940594673, 3990752950,
      1013706024, 2541230665, 714182047, 1470051273, 128494249, 233668005, 1110282108, 1303431542, 2447923021, 2841889998, 4002861748, 685880880, 4049713421, 426190525, 2611839041, 2691614656,
      2213691729, 3689952402, 2719939695, 852380815, 3761468179, 2814799209, 1835308005, 439351999, 482326459, 1946400088, 1848397799, 2310510173, 2617584360, 1712956228, 779221812, 4062799119,
      2172812030, 321057201, 137751715, 1359969997, 2057704703, 1922299996, 3264680495, 1893975027, 793320601, 1125476561, 2737183682, 3425874824, 3480907658, 3892748208, 1207246458, 3145325266,
      2500338150, 2565168195, 3090220752, 3816533777, 1097159550, 2854949068, 3034881240, 1453839460, 2083936763, 1260422258, 2672686826, 1605033834, 3252669997, 1214797936, 2951971274, 98078982,
      2001430874, 3727205780, 3742384697, 1002653569, 2194319100, 3369256227, 4167873027, 215325192, 3081519322, 3104432509, 607398968, 1380426447, 2994000348, 2824547171, 3579155765, 2658472263,
      3857441301, 2486224459, 1863624778, 597460625, 1791768908, 2331986527, 110120196, 2581445614, 290638366, 4291041450, 1684642027, 4277993223, 878576011, 2098118230, 3885750714, 1673605698,
      3051125621, 641996695, 2932565607, 621595541, 2593482732, 2250952791, 1345821024, 3839034808, 2911091301, 4021171481, 4140372900, 1531619777, 1042011783, 4032388768, 344611608, 40909743,
      81819307, 1230028765, 1243112415, 2780190406, 1028852357, 2266118138, 3063195511, 1699839814, 1638992365, 3974555931, 1166353877, 1966822133, 3124837759, 3460466727, 3947774898, 3186202582,
      2074014546, 1400849762, 989569068, 3167842427, 536308665, 454499602, 2045692157, 662499386, 172349196, 3714087318, 871803682, 4196174252, 2897960392, 192753825, 3198241748, 3775632574,
      3440006181, 2118541908, 4078011042, 3869457943, 895936038, 1476556227, 948673411, 1153286776, 55106562, 2459994959, 968064046, 1770317134, 2291102192, 758720310, 3539812252, 4213468673,
      924245385, 0, 2371346678, 2476240098, 1324881268, 550787731, 20506541, 1079882963, 398624538, 275393971, 2027302736, 2384411892, 245735847, 3008116337, 3609570970, 1910187102,
      495407126, 1660540399, 830902413, 303699484, 4118925222, 2356086619, 3592243511, 1497010798, 3329713284, 3309287558, 1187903959, 2429595872, 3343876905, 2520841700, 151849742, 2706776173,
      3387564686, 1283993307, 1987284727, 364035253, 408928528, 732523058, 2760814955, 4183053742, 1619652160, 1441728614, 1730233577, 569163070, 817788704, 2345119218, 3236374912, 516918292,
      3796060348, 2801699524, 3552958513, 385507511, 2159713619, 1338045145, 3913185309, 908999204, 1811209953, 1423437771, 4159829001, 3283088770, 4105775115, 702108061, 1586641095, 2220551160,
      3635996816, 2973502942, 3498902579, 1558315880, 1574626501, 3696795195, 261965322, 3670594367, 2401753945, 4237083816, 3214519417, 1517440620, 3399679628, 3518358430, 3933643807, 2953112179
    ])
  ]);
  

  const SQUARE_RCON = new Uint32Array([
    0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000
  ]);

  const SQUARE_THETA_MATRIX = Object.freeze([
    [0x02, 0x01, 0x01, 0x03],
    [0x03, 0x02, 0x01, 0x01],
    [0x01, 0x03, 0x02, 0x01],
    [0x01, 0x01, 0x03, 0x02]
  ]);

  const SQUARE_ROUNDS = 8;
  const SQUARE_GF_MODULUS = 0xF5;

  function squareMultiplyGF(a, b) {
    let result = 0;
    let multiplicand = a & 0xFF;
    let multiplier = b & 0xFF;

    for (let i = 0; i < 8; i++) {
      if (multiplier & 1) {
        result ^= multiplicand;
      }

      const highBit = multiplicand & 0x80;
      multiplicand = (multiplicand << 1) & 0xFF;
      if (highBit) {
        multiplicand ^= SQUARE_GF_MODULUS;
      }

      multiplier >>>= 1;
    }

    return result & 0xFF;
  }

  function squareThetaWord(word) {
    const bytes = [
      (word >>> 24) & 0xFF,
      (word >>> 16) & 0xFF,
      (word >>> 8) & 0xFF,
      word & 0xFF
    ];

    let transformed = 0;
    for (let column = 0; column < 4; column++) {
      let acc = 0;
      for (let row = 0; row < 4; row++) {
        acc ^= squareMultiplyGF(bytes[row], SQUARE_THETA_MATRIX[row][column]);
      }
      transformed |= acc << ((3 - column) * 8);
    }

    return transformed >>> 0;
  }

  function squareApplyTheta(roundKeys, roundIndex) {
    const offset = roundIndex * 4;
    for (let i = 0; i < 4; i++) {
      roundKeys[offset + i] = squareThetaWord(roundKeys[offset + i]);
    }
  }

  function squareGenerateRoundKeys(keyBytes) {
    const totalWords = (SQUARE_ROUNDS + 1) * 4;
    const baseWords = new Uint32Array(totalWords);

    for (let i = 0; i < 4; i++) {
      const idx = i * 4;
      baseWords[i] = OpCodes.Pack32BE(
        keyBytes[idx],
        keyBytes[idx + 1],
        keyBytes[idx + 2],
        keyBytes[idx + 3]
      ) >>> 0;
    }

    for (let round = 1; round <= SQUARE_ROUNDS; round++) {
      const prev = (round - 1) * 4;
      const current = round * 4;
      const rotated = OpCodes.RotL32(baseWords[prev + 3], 8);

      baseWords[current] = (baseWords[prev] ^ rotated ^ SQUARE_RCON[round - 1]) >>> 0;
      baseWords[current + 1] = (baseWords[prev + 1] ^ baseWords[current]) >>> 0;
      baseWords[current + 2] = (baseWords[prev + 2] ^ baseWords[current + 1]) >>> 0;
      baseWords[current + 3] = (baseWords[prev + 3] ^ baseWords[current + 2]) >>> 0;
    }

    const encRoundKeys = baseWords.slice();
    for (let round = 0; round < SQUARE_ROUNDS; round++) {
      squareApplyTheta(encRoundKeys, round);
    }

    const decRoundKeys = baseWords.slice();
    for (let i = 0; i < SQUARE_ROUNDS / 2; i++) {
      const a = i * 4;
      const b = (SQUARE_ROUNDS - i) * 4;
      for (let j = 0; j < 4; j++) {
        const tmp = decRoundKeys[a + j];
        decRoundKeys[a + j] = decRoundKeys[b + j];
        decRoundKeys[b + j] = tmp;
      }
    }
    squareApplyTheta(decRoundKeys, SQUARE_ROUNDS);

    return {
      enc: encRoundKeys,
      dec: decRoundKeys
    };
  }

  // ===== ALGORITHM IMPLEMENTATION =====

  class SquareAlgorithm extends BlockCipherAlgorithm {
    constructor() {
      super();

      // Required metadata
      this.name = "Square";
      this.description = "Predecessor to Rijndael/AES designed by Joan Daemen and Vincent Rijmen in 1997. Uses 128-bit blocks and keys with 8 rounds.";
      this.inventor = "Joan Daemen and Vincent Rijmen";
      this.year = 1997;
      this.category = CategoryType.BLOCK;
      this.subCategory = "Block Cipher";
      this.securityStatus = SecurityStatus.EDUCATIONAL;
      this.complexity = ComplexityType.INTERMEDIATE;
      this.country = CountryCode.BE;

      this.SupportedKeySizes = [
        new KeySize(16, 16, 0)
      ];
      this.SupportedBlockSizes = [
        new KeySize(16, 16, 0)
      ];

      this.documentation = [
        new LinkItem("The block cipher Square", "https://link.springer.com/chapter/10.1007/BFb0052343"),
        new LinkItem("Fast Software Encryption 1997", "https://link.springer.com/conference/fse")
      ];

      this.references = [
        new LinkItem("Crypto++ Square implementation", "https://github.com/weidai11/cryptopp/blob/master/square.cpp"),
        new LinkItem("Crypto++ Square tables", "https://github.com/weidai11/cryptopp/blob/master/squaretb.cpp"),
        new LinkItem("Square cipher test vectors", "https://github.com/weidai11/cryptopp/blob/master/TestData/squareva.dat")
      ];

      this.knownVulnerabilities = [
        new Vulnerability(
          "Square attack",
          "Algorithm is for historical/educational purposes only - use AES instead",
          "https://link.springer.com/chapter/10.1007/BFb0052343"
        )
      ];

      this.tests = [
        {
          text: "Square Known Answer Test #1",
          uri: "https://github.com/weidai11/cryptopp/blob/master/TestData/squareva.dat",
          input: OpCodes.Hex8ToBytes("00000000000000000000000000000000"),
          key: OpCodes.Hex8ToBytes("00000000000000000000000000000000"),
          expected: OpCodes.Hex8ToBytes("3C00428F8ABBC0B84F057CC19C26F8CF")
        },
        {
          text: "Square Known Answer Test #2",
          uri: "https://github.com/weidai11/cryptopp/blob/master/TestData/squareva.dat",
          input: OpCodes.Hex8ToBytes("00000000000000000000000000000000"),
          key: OpCodes.Hex8ToBytes("000102030405060708090A0B0C0D0E0F"),
          expected: OpCodes.Hex8ToBytes("FF596FA668BFC3014200AE01E2BBA0A0")
        },
        {
          text: "Square Known Answer Test #3",
          uri: "https://github.com/weidai11/cryptopp/blob/master/TestData/squareva.dat",
          input: OpCodes.Hex8ToBytes("000102030405060708090A0B0C0D0E0F"),
          key: OpCodes.Hex8ToBytes("000102030405060708090A0B0C0D0E0F"),
          expected: OpCodes.Hex8ToBytes("7C3491D94994E70F0EC2E7A5CCB5A14F")
        }
      ];
    }

    CreateInstance(isInverse = false) {
      return new SquareInstance(this, isInverse);
    }
  }

  class SquareInstance extends IBlockCipherInstance {
    constructor(algorithm, isInverse = false) {
      super(algorithm);
      this.isInverse = !!isInverse;
      this.inputBuffer = [];
      this.BlockSize = 16;
      this.KeySize = 0;
      this._keyBytes = null;
      this.encRoundKeys = null;
      this.decRoundKeys = null;
    }

    set key(keyBytes) {
      if (!keyBytes) {
        this._keyBytes = null;
        this.encRoundKeys = null;
        this.decRoundKeys = null;
        this.KeySize = 0;
        return;
      }

      if (keyBytes.length !== 16) {
        throw new Error('Invalid key size: ' + keyBytes.length + ' bytes');
      }

      const schedule = squareGenerateRoundKeys(keyBytes);
      this._keyBytes = Uint8Array.from(keyBytes);
      this.encRoundKeys = schedule.enc;
      this.decRoundKeys = schedule.dec;
      this.KeySize = keyBytes.length;
    }

    get key() {
      return this._keyBytes ? Array.from(this._keyBytes) : null;
    }

    Feed(data) {
      if (!data || data.length === 0) {
        return;
      }
      if (!this._keyBytes) {
        throw new Error('Key not set');
      }
      this.inputBuffer.push(...data);
    }

    Result() {
      if (!this._keyBytes) {
        throw new Error('Key not set');
      }
      if (this.inputBuffer.length === 0) {
        throw new Error('No data fed');
      }
      if (this.inputBuffer.length % this.BlockSize !== 0) {
        throw new Error('Input length must be multiple of ' + this.BlockSize + ' bytes');
      }

      const output = [];
      for (let i = 0; i < this.inputBuffer.length; i += this.BlockSize) {
        const block = this.inputBuffer.slice(i, i + this.BlockSize);
        const processed = this.isInverse
          ? this._decryptBlock(block)
          : this._encryptBlock(block);
        output.push(...processed);
      }

      this.inputBuffer = [];
      return output;
    }

    _encryptBlock(block) {
      if (!this.encRoundKeys) {
        throw new Error('Encryption round keys not initialised');
      }

      let s0 = OpCodes.Pack32BE(block[0], block[1], block[2], block[3]) >>> 0;
      let s1 = OpCodes.Pack32BE(block[4], block[5], block[6], block[7]) >>> 0;
      let s2 = OpCodes.Pack32BE(block[8], block[9], block[10], block[11]) >>> 0;
      let s3 = OpCodes.Pack32BE(block[12], block[13], block[14], block[15]) >>> 0;

      const roundKeys = this.encRoundKeys;
      s0 ^= roundKeys[0];
      s1 ^= roundKeys[1];
      s2 ^= roundKeys[2];
      s3 ^= roundKeys[3];

      for (let round = 1; round < SQUARE_ROUNDS; round++) {
        const rkOffset = round * 4;
        const t0 = SQUARE_T_ENC[0][(s0 >>> 24) & 0xFF] ^
                   SQUARE_T_ENC[1][(s1 >>> 24) & 0xFF] ^
                   SQUARE_T_ENC[2][(s2 >>> 24) & 0xFF] ^
                   SQUARE_T_ENC[3][(s3 >>> 24) & 0xFF] ^
                   roundKeys[rkOffset];
        const t1 = SQUARE_T_ENC[0][(s0 >>> 16) & 0xFF] ^
                   SQUARE_T_ENC[1][(s1 >>> 16) & 0xFF] ^
                   SQUARE_T_ENC[2][(s2 >>> 16) & 0xFF] ^
                   SQUARE_T_ENC[3][(s3 >>> 16) & 0xFF] ^
                   roundKeys[rkOffset + 1];
        const t2 = SQUARE_T_ENC[0][(s0 >>> 8) & 0xFF] ^
                   SQUARE_T_ENC[1][(s1 >>> 8) & 0xFF] ^
                   SQUARE_T_ENC[2][(s2 >>> 8) & 0xFF] ^
                   SQUARE_T_ENC[3][(s3 >>> 8) & 0xFF] ^
                   roundKeys[rkOffset + 2];
        const t3 = SQUARE_T_ENC[0][s0 & 0xFF] ^
                   SQUARE_T_ENC[1][s1 & 0xFF] ^
                   SQUARE_T_ENC[2][s2 & 0xFF] ^
                   SQUARE_T_ENC[3][s3 & 0xFF] ^
                   roundKeys[rkOffset + 3];
        s0 = t0 >>> 0;
        s1 = t1 >>> 0;
        s2 = t2 >>> 0;
        s3 = t3 >>> 0;
      }

      const finalOffset = SQUARE_ROUNDS * 4;
      const r0 = OpCodes.Pack32BE(
        SQUARE_SBOX[(s0 >>> 24) & 0xFF],
        SQUARE_SBOX[(s1 >>> 24) & 0xFF],
        SQUARE_SBOX[(s2 >>> 24) & 0xFF],
        SQUARE_SBOX[(s3 >>> 24) & 0xFF]
      ) ^ roundKeys[finalOffset];
      const r1 = OpCodes.Pack32BE(
        SQUARE_SBOX[(s0 >>> 16) & 0xFF],
        SQUARE_SBOX[(s1 >>> 16) & 0xFF],
        SQUARE_SBOX[(s2 >>> 16) & 0xFF],
        SQUARE_SBOX[(s3 >>> 16) & 0xFF]
      ) ^ roundKeys[finalOffset + 1];
      const r2 = OpCodes.Pack32BE(
        SQUARE_SBOX[(s0 >>> 8) & 0xFF],
        SQUARE_SBOX[(s1 >>> 8) & 0xFF],
        SQUARE_SBOX[(s2 >>> 8) & 0xFF],
        SQUARE_SBOX[(s3 >>> 8) & 0xFF]
      ) ^ roundKeys[finalOffset + 2];
      const r3 = OpCodes.Pack32BE(
        SQUARE_SBOX[s0 & 0xFF],
        SQUARE_SBOX[s1 & 0xFF],
        SQUARE_SBOX[s2 & 0xFF],
        SQUARE_SBOX[s3 & 0xFF]
      ) ^ roundKeys[finalOffset + 3];

      return [
        ...OpCodes.Unpack32BE(r0 >>> 0),
        ...OpCodes.Unpack32BE(r1 >>> 0),
        ...OpCodes.Unpack32BE(r2 >>> 0),
        ...OpCodes.Unpack32BE(r3 >>> 0)
      ];
    }

    _decryptBlock(block) {
      if (!this.decRoundKeys) {
        throw new Error('Decryption round keys not initialised');
      }

      let s0 = OpCodes.Pack32BE(block[0], block[1], block[2], block[3]) >>> 0;
      let s1 = OpCodes.Pack32BE(block[4], block[5], block[6], block[7]) >>> 0;
      let s2 = OpCodes.Pack32BE(block[8], block[9], block[10], block[11]) >>> 0;
      let s3 = OpCodes.Pack32BE(block[12], block[13], block[14], block[15]) >>> 0;

      const roundKeys = this.decRoundKeys;
      s0 ^= roundKeys[0];
      s1 ^= roundKeys[1];
      s2 ^= roundKeys[2];
      s3 ^= roundKeys[3];

      for (let round = 1; round < SQUARE_ROUNDS; round++) {
        const rkOffset = round * 4;
        const t0 = SQUARE_T_DEC[0][(s0 >>> 24) & 0xFF] ^
                   SQUARE_T_DEC[1][(s1 >>> 24) & 0xFF] ^
                   SQUARE_T_DEC[2][(s2 >>> 24) & 0xFF] ^
                   SQUARE_T_DEC[3][(s3 >>> 24) & 0xFF] ^
                   roundKeys[rkOffset];
        const t1 = SQUARE_T_DEC[0][(s0 >>> 16) & 0xFF] ^
                   SQUARE_T_DEC[1][(s1 >>> 16) & 0xFF] ^
                   SQUARE_T_DEC[2][(s2 >>> 16) & 0xFF] ^
                   SQUARE_T_DEC[3][(s3 >>> 16) & 0xFF] ^
                   roundKeys[rkOffset + 1];
        const t2 = SQUARE_T_DEC[0][(s0 >>> 8) & 0xFF] ^
                   SQUARE_T_DEC[1][(s1 >>> 8) & 0xFF] ^
                   SQUARE_T_DEC[2][(s2 >>> 8) & 0xFF] ^
                   SQUARE_T_DEC[3][(s3 >>> 8) & 0xFF] ^
                   roundKeys[rkOffset + 2];
        const t3 = SQUARE_T_DEC[0][s0 & 0xFF] ^
                   SQUARE_T_DEC[1][s1 & 0xFF] ^
                   SQUARE_T_DEC[2][s2 & 0xFF] ^
                   SQUARE_T_DEC[3][s3 & 0xFF] ^
                   roundKeys[rkOffset + 3];
        s0 = t0 >>> 0;
        s1 = t1 >>> 0;
        s2 = t2 >>> 0;
        s3 = t3 >>> 0;
      }

      const finalOffset = SQUARE_ROUNDS * 4;
      const r0 = OpCodes.Pack32BE(
        SQUARE_INV_SBOX[(s0 >>> 24) & 0xFF],
        SQUARE_INV_SBOX[(s1 >>> 24) & 0xFF],
        SQUARE_INV_SBOX[(s2 >>> 24) & 0xFF],
        SQUARE_INV_SBOX[(s3 >>> 24) & 0xFF]
      ) ^ roundKeys[finalOffset];
      const r1 = OpCodes.Pack32BE(
        SQUARE_INV_SBOX[(s0 >>> 16) & 0xFF],
        SQUARE_INV_SBOX[(s1 >>> 16) & 0xFF],
        SQUARE_INV_SBOX[(s2 >>> 16) & 0xFF],
        SQUARE_INV_SBOX[(s3 >>> 16) & 0xFF]
      ) ^ roundKeys[finalOffset + 1];
      const r2 = OpCodes.Pack32BE(
        SQUARE_INV_SBOX[(s0 >>> 8) & 0xFF],
        SQUARE_INV_SBOX[(s1 >>> 8) & 0xFF],
        SQUARE_INV_SBOX[(s2 >>> 8) & 0xFF],
        SQUARE_INV_SBOX[(s3 >>> 8) & 0xFF]
      ) ^ roundKeys[finalOffset + 2];
      const r3 = OpCodes.Pack32BE(
        SQUARE_INV_SBOX[s0 & 0xFF],
        SQUARE_INV_SBOX[s1 & 0xFF],
        SQUARE_INV_SBOX[s2 & 0xFF],
        SQUARE_INV_SBOX[s3 & 0xFF]
      ) ^ roundKeys[finalOffset + 3];

      return [
        ...OpCodes.Unpack32BE(r0 >>> 0),
        ...OpCodes.Unpack32BE(r1 >>> 0),
        ...OpCodes.Unpack32BE(r2 >>> 0),
        ...OpCodes.Unpack32BE(r3 >>> 0)
      ];
    }
  }

  const algorithmInstance = new SquareAlgorithm();
  if (!AlgorithmFramework.Find(algorithmInstance.name)) {
    RegisterAlgorithm(algorithmInstance);
  }

  return { SquareAlgorithm, SquareInstance };
}));
